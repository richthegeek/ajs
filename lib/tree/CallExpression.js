// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  module.exports = function(node, callback) {
    return this.recurseAll([node.callee].filter(Boolean), node, callback, (function(_this) {
      return function(err, _arg) {
        var object;
        object = _arg[0];
        node.callee = {
          type: 'Literal',
          value: object
        };
        return _this.recurseAll([node.callee].concat(node["arguments"]), node, callback, function(err, _arg1) {
          var al, args, cal, callee, callee_args, string;
          callee = _arg1[0], args = 2 <= _arg1.length ? __slice.call(_arg1, 1) : [];
          node.callee = callee;
          node["arguments"] = args;
          string = callee.toString();
          if (_this.options.inferCallbacks && (callee_args = string.match(/^function \(([^\)]+)\)/))) {
            callee_args = callee_args[1].split(/,\s*/);
            cal = callee_args.length;
            al = args.length;
            if (callee_args[cal - 1] === 'callback') {
              if ((al + 1) === cal) {
                args.push(callback);
                return callee.apply(null, args);
              } else if (al === cal && typeof args[al - 1] !== 'function') {
                return callback('Fn expected callback function as last argument, had', args[al - 1]);
              }
            }
          }
          if (string.indexOf('[native code]') >= 0) {
            if (callee.name === 'toString') {
              console.log(object, callee.name);
              return callback(null, object[callee.name].apply(object, args));
            } else {
              return callback(null, callee.apply(null, args));
            }
          } else {
            return callback(null, callee.apply(null, args));
          }
        });
      };
    })(this));
  };

}).call(this);

//# sourceMappingURL=CallExpression.map
