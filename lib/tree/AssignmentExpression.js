// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(node, callback) {
    var set;
    set = (function(_this) {
      return function(property) {
        if (property.type !== 'Identifier') {
          return callback('AssignmentExpression: property is not an Identifier?');
        }
        return _this.recurseAll([property, node.right], node, callback, function(err, _arg) {
          var new_value, old_value, value;
          old_value = _arg[0], new_value = _arg[1];
          switch (node.operator) {
            case '=':
              value = new_value;
              break;
            case '+=':
              value = old_value + new_value;
              break;
            case '-=':
              value = old_value - new_value;
              break;
            case '*=':
              value = old_value * new_value;
              break;
            case '/=':
              value = old_value / new_value;
              break;
            case '%=':
              value = old_value % new_value;
              break;
            case '<<=':
              value = old_value << new_value;
              break;
            case '>>=':
              value = old_value >> new_value;
              break;
            case '>>>=':
              value = old_value >>> new_value;
              break;
            case '&=':
              value = old_value & new_value;
              break;
            case '^=':
              value = old_value ^ new_value;
              break;
            case '|=':
              value = old_value | new_value;
              break;
            default:
              return callback('AssignmentExpression: unknown operator ' + node.operator);
          }
          return property.context.set(property.name, value, callback);
        });
      };
    })(this);
    if (node.left.type === 'Identifier') {
      return set(node.left);
    } else if (node.left.type === 'MemberExpression') {
      return this.recurse(node.left.object, node, callback, (function(_this) {
        return function(err, object) {
          node.left.property.context = new _this.constructor.Context(node.left.object.context, object);
          return set(node.left.property);
        };
      })(this));
    } else {
      return callback('AssignmentExpression: unknown left type ' + node.left.type);
    }
  };

}).call(this);

//# sourceMappingURL=AssignmentExpression.map
