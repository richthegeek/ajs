// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  module.exports = function(node, callback) {
    var self;
    self = this;
    return this.recurseAll(node.params, node, callback, function(err, params) {
      var fn, pstring, ret_fn;
      fn = function() {
        var callback, ctx, e, param_values, vm, _i;
        param_values = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
        ctx = {};
        params.forEach(function(key, i) {
          return ctx[key] = param_values[i];
        });
        vm = new Evaluator(this.target, ctx, {
          inferCallbacks: self.options.inferCallbacks,
          allowReturnOutsideFunction: true
        });
        try {
          return vm.recurse(node.body, callback);
        } catch (_error) {
          e = _error;
          if (e instanceof Evaluator.Return) {
            return callback(null, e.value);
          }
          throw e;
        }
      };
      pstring = params.concat('callback').join(', ');
      ret_fn = eval("ret_fn = function (" + pstring + ") { return fn(" + pstring + ") }");
      return callback(null, ret_fn);
    });
  };

}).call(this);

//# sourceMappingURL=FunctionDeclaration.map
