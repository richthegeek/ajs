// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  module.exports = function(node, callback) {
    var Evaluator, fn, params, pstring, ret_fn, self;
    Evaluator = this.constructor;
    self = this;
    params = node.params.map(function(param) {
      return param.name;
    });
    fn = function() {
      var args, callback, cb, param_values, vm, _i;
      param_values = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      args = {};
      params.forEach(function(key, i) {
        return args[key] = param_values[i];
      });
      node.context = new Evaluator.Context(node.context, args);
      vm = new Evaluator(node.context, {
        inferCallbacks: self.options.inferCallbacks,
        allowReturnOutsideFunction: true
      });
      cb = function(err, _arg) {
        var result, results;
        results = 1 <= _arg.length ? __slice.call(_arg, 0) : [];
        result = results.pop();
        if (err !== 'return') {
          return callback(err);
        }
        return callback(null, result);
      };
      return vm.recurse(node.body, node, cb, cb);
    };
    pstring = params.concat('callback').join(', ');
    ret_fn = eval("ret_fn = function (" + pstring + ") { return fn(" + pstring + ") }");
    ret_fn.toString = function() {
      return "function (" + pstring + ") { [Evaluated Function] }";
    };
    return callback(null, ret_fn);
  };

}).call(this);

//# sourceMappingURL=FunctionExpression.map
